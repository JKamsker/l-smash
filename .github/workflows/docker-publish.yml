name: Docker

on:
  push:
    branches:
      - master

    # Publish `v1.2.3` tags as releases .
    tags:
      - v*

env:
  IMAGE_NAME: l-smash

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2



      - name: Calculate Publishing Variables
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] &&  EXPLICIT_VERSION=$(echo $VERSION | sed -e 's/^v//') && VERSION=EXPLICIT_VERSION

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "EXPLICIT_VERSION=$EXPLICIT_VERSION" >> $GITHUB_ENV

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Echoing the publishing Variables
        run: |
          # ${{env.IMAGE_ID}} == $IMAGE_ID
          echo IMAGE_ID="${{env.IMAGE_ID}}"
          echo VERSION="${{env.VERSION}}"
          echo EXPLICIT_VERSION="${{env.EXPLICIT_VERSION}}"

      - name: Push image
        run: |
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          [ ! -z "$EXPLICIT_VERSION" ] && docker tag $IMAGE_NAME $IMAGE_ID:$EXPLICIT_VERSION
          docker push $IMAGE_ID:$VERSION 